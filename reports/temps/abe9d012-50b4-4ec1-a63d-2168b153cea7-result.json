{"name": "test_register[case41]", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'status_code'", "trace": "case = {'提取响应字段': None, '数据库断言': None, '期望结果': '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>', '用例标题': '微信退款回调_正常流程', ...}\n\n    @allure.epic('AI家长端项目')\n    @allure.feature('所有模块')\n    @allure.description(\"描述：所有测试模块\")\n    @allure.link(url=\"https://minicourse.test.venhalo.com\", name=\"接口地址\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.skipif(IS_CI_ENV, reason=\"在CI环境中跳过需要数据库连接的测试\")\n    @pytest.mark.parametrize('case', case_datas)\n    def test_register(case):\n>       res = send_request(case)\n\ntestcases\\parent\\test_2_all_parent.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'提取响应字段': None, '数据库断言': None, '期望结果': '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>', '用例标题': '微信退款回调_正常流程', ...}\n\n    def send_request(case):\n        \"\"\"\n        统一发送请求封装\n        :param case: 用例数据\n        :return: 响应结果\n        \"\"\"\n        # 提取所有请求字段\n        case_id = case['用例编号']\n        title = case['用例标题']\n        method = case['请求方法']\n        url = case['请求地址']\n        params = case['请求参数']\n        headers = case['请求头']\n        # 在请求发送、记录请求日志之前做标记识别替换的动作，需要做参数替换有请求地址、请求参数、请求头\n        if isinstance(url, str):\n            url = Template(url).safe_substitute(dic_env)\n        if params:\n            params = Template(params).safe_substitute(dic_env)\n        if headers:\n            headers = Template(headers).safe_substitute(dic_env)\n        logger.info('-----------------------用例开始执行---------------------------')\n        logger.info('-------------------------请求日志---------------------------')\n        logger.info(f'用例编号：{case_id}')\n        logger.info(f'用例标题：{title}')\n        allure.attach(title, '用例标题')\n        logger.info(f'请求方法：{method}')\n        allure.attach(method, '请求方法')\n        logger.info(f'请求地址：{url}')\n        allure.attach(url, '请求地址')\n        if headers:\n            logger.info(f'请求头：{headers}')\n            allure.attach(str(headers), '请求头', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求头为空')\n        # 请求参数添加到allure报告\n        if params:\n            logger.info(f'请求参数：{params}')\n            allure.attach(params, '请求参数', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求参数为空')\n        dic_headers = None\n        res = None\n        if headers:\n            dic_headers = json.loads(headers)\n        if method.lower() == 'get' or method.lower() == 'delete':\n            # 兼容get、delete请求参数params为空的情况\n            if params:\n                res = request(method, url, params=json.loads(params), headers=dic_headers)\n            else:\n                res = request(method, url, headers=dic_headers)\n        elif method.lower() == 'post' or method.lower() == 'put':\n            # 判断传参类型，如果Content-Type字段的值是application/json，表明是json传参\n            if 'application/json' in dic_headers['Content-Type']:\n                res = request(method, url, json=json.loads(params), headers=dic_headers)\n            # 如果Content-Type字段的值是application/x-www-form-urlencoded，表明是form表单传参\n            elif 'application/x-www-form-urlencoded' in dic_headers['Content-Type']:\n                res = request(method, url, data=json.loads(params), headers=dic_headers)\n            # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization\n            elif 'multipart/form-data' in dic_headers['Content-Type']:\n                # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization，指定了Content-Type之后\n                # 默认把requests加的boundary字段的值进行覆盖，实际上传递给后端就没有boundary字段，最终会导致500的问题，去掉Content-Type\n                dic_headers.pop('Content-Type')\n                res = request(method, url, files=eval(params), headers=dic_headers)\n        else:\n            logger.error('当前请求方法不支持')\n        logger.info('-------------------------响应日志---------------------------')\n>       logger.info(f'响应状态码：{res.status_code}')\nE       AttributeError: 'NoneType' object has no attribute 'status_code'\n\ncommon\\base_test.py:103: AttributeError"}, "description": "描述：所有测试模块", "attachments": [{"name": "用例标题", "source": "6849bb4a-8c3b-443d-8226-adff14b46cb7-attachment.attach"}, {"name": "请求方法", "source": "7673b218-817f-425d-82f7-1d24ad46ae45-attachment.attach"}, {"name": "请求地址", "source": "97291716-922c-47ff-84a1-74dc87b9e72e-attachment.attach"}, {"name": "请求头", "source": "3bd18d97-f0d1-4d0b-b6e2-8d5b9c8acbc0-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "a5cadc65-7460-4b85-a790-6f400c87b591-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例编号': 49, '用例标题': '微信退款回调_正常流程', '请求方法': 'POST', '请求地址': 'https://minicourse.test.venhalo.com/api/v1/payment/wx/refund/callback', '请求头': '{\"Content-Type\": \"application/xml\"}', '请求参数': 'xml_data', '期望结果': '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>', '数据库断言': None, '提取响应字段': None}"}], "start": 1758618431491, "stop": 1758618431496, "uuid": "7c30e978-928a-43ab-bc17-90aba07237f3", "historyId": "d1ec6d9d7de0a49290a9ccd44a366a03", "testCaseId": "f894bec99670d2ceb6a8fed7011e5671", "fullName": "testcases.parent.test_2_all_parent#test_register", "labels": [{"name": "feature", "value": "所有模块"}, {"name": "severity", "value": "blocker"}, {"name": "epic", "value": "AI家长端项目"}, {"name": "parentSuite", "value": "testcases.parent"}, {"name": "suite", "value": "test_2_all_parent"}, {"name": "host", "value": "DESKTOP-GLFP8VP"}, {"name": "thread", "value": "25008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.parent.test_2_all_parent"}], "links": [{"type": "link", "url": "https://minicourse.test.venhalo.com", "name": "接口地址"}], "titlePath": ["testcases", "parent", "test_2_all_parent.py"]}