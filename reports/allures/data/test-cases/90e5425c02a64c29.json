{"uid":"90e5425c02a64c29","name":"test_order[case9]","fullName":"testcases.student.test_6_order#test_order","historyId":"7914bfed53afa0a39cfb5a54ecca1248","time":{"start":1758533452558,"stop":1758533453512,"duration":954},"description":"描述：订单模块","descriptionHtml":"<p>描述：订单模块</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"case = {'提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}', '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '用例标题': '查询订单支付状态', ...}\n\n>   ???\n\nD:\\Pycharm-Workspace\\api_auto-master\\testcases\\shop\\test_6_order.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}', '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '用例标题': '查询订单支付状态', ...}\nres = <Response [200]>\n\n    def assert_res(case, res):\n        \"\"\"\n        统一响应断言封装\n        :param case: 用例数据\n        :param res: 接口响应\n        :return: 没有返回\n        \"\"\"\n        # 获取期望结果\n        case_expect = case['期望结果']\n        if case_expect:\n            logger.info('-------------------------断言日志---------------------------')\n            dic = json.loads(case_expect)\n            # 遍历期望结果字典，k：响应字段，v：期望结果\n            for k, v in dic.items():\n                # 响应状态码断言\n                if k == 'status_code':\n                    assert res.status_code == v\n                    logger.info(f'响应状态码断言，期望值：{v}，实际值：{res.status_code}')\n                # 响应文本断言，完全相等\n                elif k == 'text':\n>                   assert res.text == v\nE                   AssertionError\n\ncommon\\base_test.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758533416614,"stop":1758533416645,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"setup_class","time":{"start":1758533416645,"stop":1758533416646,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"teardown_class","time":{"start":1758533416646,"stop":1758533416646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"描述：订单模块","status":"failed","statusMessage":"AssertionError","statusTrace":"case = {'提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}', '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '用例标题': '查询订单支付状态', ...}\n\n>   ???\n\nD:\\Pycharm-Workspace\\api_auto-master\\testcases\\shop\\test_6_order.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}', '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '用例标题': '查询订单支付状态', ...}\nres = <Response [200]>\n\n    def assert_res(case, res):\n        \"\"\"\n        统一响应断言封装\n        :param case: 用例数据\n        :param res: 接口响应\n        :return: 没有返回\n        \"\"\"\n        # 获取期望结果\n        case_expect = case['期望结果']\n        if case_expect:\n            logger.info('-------------------------断言日志---------------------------')\n            dic = json.loads(case_expect)\n            # 遍历期望结果字典，k：响应字段，v：期望结果\n            for k, v in dic.items():\n                # 响应状态码断言\n                if k == 'status_code':\n                    assert res.status_code == v\n                    logger.info(f'响应状态码断言，期望值：{v}，实际值：{res.status_code}')\n                # 响应文本断言，完全相等\n                elif k == 'text':\n>                   assert res.text == v\nE                   AssertionError\n\ncommon\\base_test.py:137: AssertionError","steps":[],"attachments":[{"uid":"9c6cae21bb822b18","name":"用例标题","source":"9c6cae21bb822b18.attach","type":"text/plain","size":24},{"uid":"c333056782c7d0b2","name":"请求方法","source":"c333056782c7d0b2.attach","type":"text/plain","size":3},{"uid":"582602493f21b168","name":"请求地址","source":"582602493f21b168.attach","type":"text/plain","size":59},{"uid":"6f14721b586e9cbd","name":"请求头","source":"6f14721b586e9cbd.txt","type":"text/plain","size":62},{"uid":"3c7328a86d8f7dae","name":"响应状态码","source":"3c7328a86d8f7dae.txt","type":"text/plain","size":3},{"uid":"69d3f8f930d1977f","name":"响应时间","source":"69d3f8f930d1977f.txt","type":"text/plain","size":11},{"uid":"2cd7c61971dca74f","name":"响应头","source":"2cd7c61971dca74f.txt","type":"text/plain","size":498},{"uid":"5c7f734f1d848b62","name":"响应体","source":"5c7f734f1d848b62.txt","type":"text/plain","size":5}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":8,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"teardown_class::0","time":{"start":1758533453517,"stop":1758533453559,"duration":42},"status":"passed","steps":[],"attachments":[{"uid":"a29addc18b2579d0","name":"fixture后置处理","source":"a29addc18b2579d0.txt","type":"text/plain","size":18}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0},{"name":"setup_class::0","time":{"start":1758533453560,"stop":1758533453560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"订单模块"},{"name":"severity","value":"blocker"},{"name":"epic","value":"AI学生端项目"},{"name":"parentSuite","value":"testcases.student"},{"name":"suite","value":"test_6_order"},{"name":"host","value":"DESKTOP-GLFP8VP"},{"name":"thread","value":"104384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.student.test_6_order"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'用例编号': 10, '用例标题': '查询订单支付状态', '请求地址': 'http://shop.lemonban.com:8107/p/order/isPay/${order_number}', '请求方法': 'GET', '请求头': '{\"Authorization\":\"bearer${token}\"}', '请求参数': None, '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}'}"}],"links":[{"name":"接口地址","url":"http://shop.lemonban.com:8107/login","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"90e5425c02a64c29.json","parameterValues":["{'用例编号': 10, '用例标题': '查询订单支付状态', '请求地址': 'http://shop.lemonban.com:8107/p/order/isPay/${order_number}', '请求方法': 'GET', '请求头': '{\"Authorization\":\"bearer${token}\"}', '请求参数': None, '期望结果': '{\"status_code\":200,\"text\":\"true\"}', '提取响应字段': None, '数据库断言': '{\"select status from tz_order where order_number =\\'${order_number}\\';\":2}'}"]}