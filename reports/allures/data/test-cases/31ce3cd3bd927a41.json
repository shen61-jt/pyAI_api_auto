{"uid":"31ce3cd3bd927a41","name":"test_register[case19]","fullName":"testcases.parent.test_2_all_parent#test_register","historyId":"bc12f50ffdbdea481b7b1526569b44a1","time":{"start":1758618430803,"stop":1758618430804,"duration":1},"description":"描述：所有测试模块","descriptionHtml":"<p>描述：所有测试模块</p>\n","status":"broken","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"case = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 401, \"msg\": \"未授权\"}', '用例标题': '分页获取我的小课包列表【学生端】_无权限', ...}\n\n    @allure.epic('AI家长端项目')\n    @allure.feature('所有模块')\n    @allure.description(\"描述：所有测试模块\")\n    @allure.link(url=\"https://minicourse.test.venhalo.com\", name=\"接口地址\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.skipif(IS_CI_ENV, reason=\"在CI环境中跳过需要数据库连接的测试\")\n    @pytest.mark.parametrize('case', case_datas)\n    def test_register(case):\n>       res = send_request(case)\n\ntestcases\\parent\\test_2_all_parent.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\base_test.py:90: in send_request\n    res = request(method, url, json=json.loads(params), headers=dic_headers)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\nC:\\Program Files\\Python39\\lib\\json\\__init__.py:339: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758618429678,"stop":1758618429724,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup_class","time":{"start":1758618429724,"stop":1758618429729,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"teardown_class","time":{"start":1758618429729,"stop":1758618429729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"描述：所有测试模块","status":"broken","statusMessage":"TypeError: the JSON object must be str, bytes or bytearray, not NoneType","statusTrace":"case = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 401, \"msg\": \"未授权\"}', '用例标题': '分页获取我的小课包列表【学生端】_无权限', ...}\n\n    @allure.epic('AI家长端项目')\n    @allure.feature('所有模块')\n    @allure.description(\"描述：所有测试模块\")\n    @allure.link(url=\"https://minicourse.test.venhalo.com\", name=\"接口地址\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.skipif(IS_CI_ENV, reason=\"在CI环境中跳过需要数据库连接的测试\")\n    @pytest.mark.parametrize('case', case_datas)\n    def test_register(case):\n>       res = send_request(case)\n\ntestcases\\parent\\test_2_all_parent.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\base_test.py:90: in send_request\n    res = request(method, url, json=json.loads(params), headers=dic_headers)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\nC:\\Program Files\\Python39\\lib\\json\\__init__.py:339: TypeError","steps":[],"attachments":[{"uid":"b3a18d7492af3771","name":"用例标题","source":"b3a18d7492af3771.attach","type":"text/plain","size":58},{"uid":"7f02f4714b3d1760","name":"请求方法","source":"7f02f4714b3d1760.attach","type":"text/plain","size":4},{"uid":"88fbc63cdeb20089","name":"请求地址","source":"88fbc63cdeb20089.attach","type":"text/plain","size":62},{"uid":"68457cdd48e0e67a","name":"请求头","source":"68457cdd48e0e67a.txt","type":"text/plain","size":36}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":4,"shouldDisplayMessage":true},"afterStages":[{"name":"teardown_class::0","time":{"start":1758618432260,"stop":1758618432304,"duration":44},"status":"passed","steps":[],"attachments":[{"uid":"6d9734cd57928c27","name":"fixture后置处理","source":"6d9734cd57928c27.txt","type":"text/plain","size":18}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"setup_class::0","time":{"start":1758618432305,"stop":1758618432305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"所有模块"},{"name":"severity","value":"blocker"},{"name":"epic","value":"AI家长端项目"},{"name":"parentSuite","value":"testcases.parent"},{"name":"suite","value":"test_2_all_parent"},{"name":"host","value":"DESKTOP-GLFP8VP"},{"name":"thread","value":"25008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.parent.test_2_all_parent"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'用例编号': 20, '用例标题': '分页获取我的小课包列表【学生端】_无权限', '请求方法': 'POST', '请求地址': 'https://minicourse.test.venhalo.com/api/v1/minicourse/stu/list', '请求头': '{\"Content-Type\": \"application/json\"}', '请求参数': None, '期望结果': '{\"code\": 401, \"msg\": \"未授权\"}', '数据库断言': None, '提取响应字段': None}"}],"links":[{"name":"接口地址","url":"https://minicourse.test.venhalo.com","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"31ce3cd3bd927a41.json","parameterValues":["{'用例编号': 20, '用例标题': '分页获取我的小课包列表【学生端】_无权限', '请求方法': 'POST', '请求地址': 'https://minicourse.test.venhalo.com/api/v1/minicourse/stu/list', '请求头': '{\"Content-Type\": \"application/json\"}', '请求参数': None, '期望结果': '{\"code\": 401, \"msg\": \"未授权\"}', '数据库断言': None, '提取响应字段': None}"]}