{"uid":"6ad253c008463ec5","name":"test_register[case27]","fullName":"testcases.parent.test_2_all_parent#test_register","historyId":"e831b760a547e1ff5fd179e5ce87cc39","time":{"start":1758533417984,"stop":1758533417985,"duration":1},"description":"描述：所有测试模块","descriptionHtml":"<p>描述：所有测试模块</p>\n","status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'status_code'","statusTrace":"case = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '用例标题': '更新学生学习状态【正在学习】_无效课程ID', ...}\n\n    @allure.epic('AI家长端项目')\n    @allure.feature('所有模块')\n    @allure.description(\"描述：所有测试模块\")\n    @allure.link(url=\"https://minicourse.test.venhalo.com\", name=\"接口地址\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('case', case_datas)\n    def test_register(case):\n>       res = send_request(case)\n\ntestcases\\parent\\test_2_all_parent.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '用例标题': '更新学生学习状态【正在学习】_无效课程ID', ...}\n\n    def send_request(case):\n        \"\"\"\n        统一发送请求封装\n        :param case: 用例数据\n        :return: 响应结果\n        \"\"\"\n        # 提取所有请求字段\n        case_id = case['用例编号']\n        title = case['用例标题']\n        method = case['请求方法']\n        url = case['请求地址']\n        params = case['请求参数']\n        headers = case['请求头']\n        # 在请求发送、记录请求日志之前做标记识别替换的动作，需要做参数替换有请求地址、请求参数、请求头\n        if isinstance(url, str):\n            url = Template(url).safe_substitute(dic_env)\n        if params:\n            params = Template(params).safe_substitute(dic_env)\n        if headers:\n            headers = Template(headers).safe_substitute(dic_env)\n        logger.info('-----------------------用例开始执行---------------------------')\n        logger.info('-------------------------请求日志---------------------------')\n        logger.info(f'用例编号：{case_id}')\n        logger.info(f'用例标题：{title}')\n        allure.attach(title, '用例标题')\n        logger.info(f'请求方法：{method}')\n        allure.attach(method, '请求方法')\n        logger.info(f'请求地址：{url}')\n        allure.attach(url, '请求地址')\n        if headers:\n            logger.info(f'请求头：{headers}')\n            allure.attach(str(headers), '请求头', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求头为空')\n        # 请求参数添加到allure报告\n        if params:\n            logger.info(f'请求参数：{params}')\n            allure.attach(params, '请求参数', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求参数为空')\n        dic_headers = None\n        res = None\n        if headers:\n            dic_headers = json.loads(headers)\n        if method.lower() == 'get' or method.lower() == 'delete':\n            # 兼容get、delete请求参数params为空的情况\n            if params:\n                res = request(method, url, params=json.loads(params), headers=dic_headers)\n            else:\n                res = request(method, url, headers=dic_headers)\n        elif method.lower() == 'post' or method.lower() == 'put':\n            # 判断传参类型，如果Content-Type字段的值是application/json，表明是json传参\n            if 'application/json' in dic_headers['Content-Type']:\n                res = request(method, url, json=json.loads(params), headers=dic_headers)\n            # 如果Content-Type字段的值是application/x-www-form-urlencoded，表明是form表单传参\n            elif 'application/x-www-form-urlencoded' in dic_headers['Content-Type']:\n                res = request(method, url, data=json.loads(params), headers=dic_headers)\n            # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization\n            elif 'multipart/form-data' in dic_headers['Content-Type']:\n                # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization，指定了Content-Type之后\n                # 默认把requests加的boundary字段的值进行覆盖，实际上传递给后端就没有boundary字段，最终会导致500的问题，去掉Content-Type\n                dic_headers.pop('Content-Type')\n                res = request(method, url, files=eval(params), headers=dic_headers)\n        else:\n            logger.error('当前请求方法不支持')\n        logger.info('-------------------------响应日志---------------------------')\n>       logger.info(f'响应状态码：{res.status_code}')\nE       AttributeError: 'NoneType' object has no attribute 'status_code'\n\ncommon\\base_test.py:103: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758533416614,"stop":1758533416645,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"setup_class","time":{"start":1758533416645,"stop":1758533416646,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"teardown_class","time":{"start":1758533416646,"stop":1758533416646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"描述：所有测试模块","status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'status_code'","statusTrace":"case = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '用例标题': '更新学生学习状态【正在学习】_无效课程ID', ...}\n\n    @allure.epic('AI家长端项目')\n    @allure.feature('所有模块')\n    @allure.description(\"描述：所有测试模块\")\n    @allure.link(url=\"https://minicourse.test.venhalo.com\", name=\"接口地址\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('case', case_datas)\n    def test_register(case):\n>       res = send_request(case)\n\ntestcases\\parent\\test_2_all_parent.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'提取响应字段': None, '数据库断言': None, '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '用例标题': '更新学生学习状态【正在学习】_无效课程ID', ...}\n\n    def send_request(case):\n        \"\"\"\n        统一发送请求封装\n        :param case: 用例数据\n        :return: 响应结果\n        \"\"\"\n        # 提取所有请求字段\n        case_id = case['用例编号']\n        title = case['用例标题']\n        method = case['请求方法']\n        url = case['请求地址']\n        params = case['请求参数']\n        headers = case['请求头']\n        # 在请求发送、记录请求日志之前做标记识别替换的动作，需要做参数替换有请求地址、请求参数、请求头\n        if isinstance(url, str):\n            url = Template(url).safe_substitute(dic_env)\n        if params:\n            params = Template(params).safe_substitute(dic_env)\n        if headers:\n            headers = Template(headers).safe_substitute(dic_env)\n        logger.info('-----------------------用例开始执行---------------------------')\n        logger.info('-------------------------请求日志---------------------------')\n        logger.info(f'用例编号：{case_id}')\n        logger.info(f'用例标题：{title}')\n        allure.attach(title, '用例标题')\n        logger.info(f'请求方法：{method}')\n        allure.attach(method, '请求方法')\n        logger.info(f'请求地址：{url}')\n        allure.attach(url, '请求地址')\n        if headers:\n            logger.info(f'请求头：{headers}')\n            allure.attach(str(headers), '请求头', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求头为空')\n        # 请求参数添加到allure报告\n        if params:\n            logger.info(f'请求参数：{params}')\n            allure.attach(params, '请求参数', allure.attachment_type.TEXT)\n        else:\n            logger.info('当前测试用例的请求参数为空')\n        dic_headers = None\n        res = None\n        if headers:\n            dic_headers = json.loads(headers)\n        if method.lower() == 'get' or method.lower() == 'delete':\n            # 兼容get、delete请求参数params为空的情况\n            if params:\n                res = request(method, url, params=json.loads(params), headers=dic_headers)\n            else:\n                res = request(method, url, headers=dic_headers)\n        elif method.lower() == 'post' or method.lower() == 'put':\n            # 判断传参类型，如果Content-Type字段的值是application/json，表明是json传参\n            if 'application/json' in dic_headers['Content-Type']:\n                res = request(method, url, json=json.loads(params), headers=dic_headers)\n            # 如果Content-Type字段的值是application/x-www-form-urlencoded，表明是form表单传参\n            elif 'application/x-www-form-urlencoded' in dic_headers['Content-Type']:\n                res = request(method, url, data=json.loads(params), headers=dic_headers)\n            # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization\n            elif 'multipart/form-data' in dic_headers['Content-Type']:\n                # 文件上传接口，通过headers指定的情况同时传递Content-Type和Authorization，指定了Content-Type之后\n                # 默认把requests加的boundary字段的值进行覆盖，实际上传递给后端就没有boundary字段，最终会导致500的问题，去掉Content-Type\n                dic_headers.pop('Content-Type')\n                res = request(method, url, files=eval(params), headers=dic_headers)\n        else:\n            logger.error('当前请求方法不支持')\n        logger.info('-------------------------响应日志---------------------------')\n>       logger.info(f'响应状态码：{res.status_code}')\nE       AttributeError: 'NoneType' object has no attribute 'status_code'\n\ncommon\\base_test.py:103: AttributeError","steps":[],"attachments":[{"uid":"414ea241b70b022a","name":"用例标题","source":"414ea241b70b022a.attach","type":"text/plain","size":57},{"uid":"2c1d3b70b98236cd","name":"请求方法","source":"2c1d3b70b98236cd.attach","type":"text/plain","size":5},{"uid":"d193730d341669e3","name":"请求地址","source":"d193730d341669e3.attach","type":"text/plain","size":58},{"uid":"ce2744c2edeb9b78","name":"请求头","source":"ce2744c2edeb9b78.txt","type":"text/plain","size":72},{"uid":"44f01910f4f8a635","name":"请求参数","source":"44f01910f4f8a635.txt","type":"text/plain","size":30}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":5,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"teardown_class::0","time":{"start":1758533453517,"stop":1758533453559,"duration":42},"status":"passed","steps":[],"attachments":[{"uid":"a29addc18b2579d0","name":"fixture后置处理","source":"a29addc18b2579d0.txt","type":"text/plain","size":18}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0},{"name":"setup_class::0","time":{"start":1758533453560,"stop":1758533453560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"AI家长端项目"},{"name":"feature","value":"所有模块"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcases.parent"},{"name":"suite","value":"test_2_all_parent"},{"name":"host","value":"DESKTOP-GLFP8VP"},{"name":"thread","value":"104384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.parent.test_2_all_parent"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'用例编号': 28, '用例标题': '更新学生学习状态【正在学习】_无效课程ID', '请求方法': 'PATCH', '请求地址': 'https://minicourse.test.venhalo.com/api/v1/situation/start', '请求头': '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer ${token}\"}', '请求参数': '{\"minicourseId\": \"invalid_id\"}', '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '数据库断言': None, '提取响应字段': None}"}],"links":[{"name":"接口地址","url":"https://minicourse.test.venhalo.com","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"6ad253c008463ec5.json","parameterValues":["{'用例编号': 28, '用例标题': '更新学生学习状态【正在学习】_无效课程ID', '请求方法': 'PATCH', '请求地址': 'https://minicourse.test.venhalo.com/api/v1/situation/start', '请求头': '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer ${token}\"}', '请求参数': '{\"minicourseId\": \"invalid_id\"}', '期望结果': '{\"code\": 404, \"msg\": \"课程不存在\"}', '数据库断言': None, '提取响应字段': None}"]}